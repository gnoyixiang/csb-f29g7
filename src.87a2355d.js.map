{"version":3,"sources":["src/index.js"],"names":["spiral","num","anticlockwise","target","slowdown","current","coor","dir","grid","Array","fill","map","containerEl","document","getElementById","innerHTML","r","join","borders","Math","ceil","border","i","dim","b","length","d","offset","inc","steps","x","y","childNodes","Promise","resolve","setTimeout","addEventListener","evt","preventDefault","Number","value","checked"],"mappings":"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","file":"src.87a2355d.js","sourceRoot":"..","sourcesContent":["import \"./styles.css\";\n\ndocument.getElementById(\"app\").innerHTML = `\n<h1>Hello Spiral!</h1>\n<style>\n  #spiral > div {\n    display: flex;\n  }\n  #spiral > div > div {\n    width: 36px;\n    height: 36px;\n    border: 1px solid #aaa;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-shrink: 0;\n  }\n</style>\n<form id=\"form\">\n  <label for=\"num\">Dimension</label>\n  <input name=\"num\" type=\"number\" max=\"99\" min=\"1\" required />\n  <input name=\"anticlockwise\" type=\"checkbox\" />\n  <label for=\"anticlockwise\">Anti-clockwise spiral</label>\n  <br />\n  <input type=\"submit\" value=\"Spiral it!\" />\n</form>\n<div id=\"spiral\"></div>\n`;\n\ndocument.getElementById(\"form\").addEventListener(\"submit\", (evt) => {\n  evt.preventDefault();\n  const num = Number(evt.target.num.value);\n  const anticlockwise = evt.target.anticlockwise.checked;\n\n  spiral(num, anticlockwise);\n});\n\nasync function spiral(\n  num,\n  anticlockwise = false,\n  target = \"spiral\",\n  slowdown = 50\n) {\n  let current = 0;\n  let dir = anticlockwise ? 1 : 0; // 0 = x, 1 = y\n  let coor = [0, 0];\n\n  // set starting coordinate of axis to -1\n  coor[dir] = -1;\n\n  // create grid first\n  const grid = Array(num)\n    .fill()\n    .map(() => Array(num).fill(null));\n\n  const containerEl = document.getElementById(target);\n  if (containerEl) {\n    containerEl.innerHTML = grid\n      .map((r) => {\n        return \"<div>\" + r.map(() => `<div></div>`).join(\"\") + \"</div>\";\n      })\n      .join(\"\");\n  }\n\n  // get an array of border frames to loop\n  const borders = Array(Math.ceil(num / 2))\n    .fill(null)\n    .map((border, i) => {\n      const dim = num - 2 * i;\n      const dir = dim > 2 ? 4 : dim > 1 ? 3 : 1;\n      return { dim, dir };\n    });\n\n  // loop through every border frames\n  for (let b = 0; b < borders.length; b++) {\n    const border = borders[b];\n\n    // loop through every direction\n    for (let d = 0; d < border.dir; d++) {\n      // offset for 1 direction is always 0, then for next 2 direction is 1 and 4th direction is 2\n      const offset = d > 2 ? 2 : d > 0 ? 1 : 0;\n\n      // inc will be positive for first 2 directions and negative for last 2 directions\n      const inc = d > 1 ? -1 : 1;\n\n      // loop through the steps for this dimension\n      for (let steps = 0; steps < border.dim - offset; steps++) {\n        // inc coordinate in dir\n        coor[dir] = coor[dir] + inc;\n        // set value in this coordinate\n        const x = coor[0];\n        const y = coor[1];\n        grid[y][x] = ++current;\n\n        if (containerEl) {\n          containerEl.childNodes[y].childNodes[x].innerHTML = grid[y][x];\n          if (slowdown) {\n            await new Promise((resolve) => {\n              setTimeout(() => resolve(), slowdown);\n            });\n          }\n        }\n      }\n\n      // change inc direction after finish looping through each direction\n      dir = dir === 0 ? 1 : 0;\n    }\n  }\n\n  return grid;\n}\n"]}